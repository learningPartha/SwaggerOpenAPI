/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Customer;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-08-11T10:21:23.076Z")

@Validated
@Api(value = "customer", description = "the customer API")
@RequestMapping(value = "/crm/v2")
public interface CustomerApi {

    @ApiOperation(value = "adds a new customer", nickname = "addCustomer", notes = "Add a new customer to the System", response = Integer.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Integer.class),
        @ApiResponse(code = 405, message = "Invalid Customer data") })
    @RequestMapping(value = "/customer",
        produces = { "text/plain" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Integer> addCustomer(@ApiParam(value = "new customer data in JSON format" ,required=true )  @Valid @RequestBody Customer body);


    @ApiOperation(value = "Delete existing customer", nickname = "deleteCustomer", notes = "Deletes existing customer from system", response = Customer.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Customer successfully deleted", response = Customer.class),
        @ApiResponse(code = 404, message = "Customer id not found"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/customer/{customerId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Customer> deleteCustomer(@ApiParam(value = "Customer Id that needs to be deleted",required=true) @PathVariable("customerId") Integer customerId);


    @ApiOperation(value = "reads a customer data", nickname = "getCustomer", notes = "This operation uses customer id to identify in a query string", response = Customer.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Search result matched", response = Customer.class),
        @ApiResponse(code = 404, message = "Employee with id doesn't exist") })
    @RequestMapping(value = "/customer",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Customer> getCustomer(@NotNull @ApiParam(value = "pass customer id", required = true) @Valid @RequestParam(value = "customerId", required = true) Integer customerId);


    @ApiOperation(value = "update existing customer", nickname = "updateCustomer", notes = "Updates an existing customer in system", authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully updated"),
        @ApiResponse(code = 404, message = "Customer not found"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/customer/{customerId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateCustomer(@ApiParam(value = "updated customer data input" ,required=true )  @Valid @RequestBody Customer body,@ApiParam(value = "id of customer to update",required=true) @PathVariable("customerId") Integer customerId);

}
